schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Account {
  id: ID!
  positions(skip: Int = 0, first: Int = 100, orderBy: Position_orderBy, orderDirection: OrderDirection, where: Position_filter): [Position!]!
  builds(skip: Int = 0, first: Int = 100, orderBy: Build_orderBy, orderDirection: OrderDirection, where: Build_filter): [Build!]!
  unwinds(skip: Int = 0, first: Int = 100, orderBy: Unwind_orderBy, orderDirection: OrderDirection, where: Unwind_filter): [Unwind!]!
  liquidates(skip: Int = 0, first: Int = 100, orderBy: Liquidate_orderBy, orderDirection: OrderDirection, where: Liquidate_filter): [Liquidate!]!
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  positions_: Position_filter
  builds_: Build_filter
  unwinds_: Unwind_filter
  liquidates_: Liquidate_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
  positions
  builds
  unwinds
  liquidates
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type Build {
  id: ID!
  owner: Account!
  position: Position!
  currentOi: BigInt!
  currentDebt: BigInt!
  isLong: Boolean!
  price: BigInt!
  collateral: BigInt!
  value: BigInt!
  timestamp: BigInt!
  transaction: Transaction!
}

input Build_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  currentOi: BigInt
  currentOi_not: BigInt
  currentOi_gt: BigInt
  currentOi_lt: BigInt
  currentOi_gte: BigInt
  currentOi_lte: BigInt
  currentOi_in: [BigInt!]
  currentOi_not_in: [BigInt!]
  currentDebt: BigInt
  currentDebt_not: BigInt
  currentDebt_gt: BigInt
  currentDebt_lt: BigInt
  currentDebt_gte: BigInt
  currentDebt_lte: BigInt
  currentDebt_in: [BigInt!]
  currentDebt_not_in: [BigInt!]
  isLong: Boolean
  isLong_not: Boolean
  isLong_in: [Boolean!]
  isLong_not_in: [Boolean!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  collateral: BigInt
  collateral_not: BigInt
  collateral_gt: BigInt
  collateral_lt: BigInt
  collateral_gte: BigInt
  collateral_lte: BigInt
  collateral_in: [BigInt!]
  collateral_not_in: [BigInt!]
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Build_filter]
  or: [Build_filter]
}

enum Build_orderBy {
  id
  owner
  owner__id
  position
  position__id
  position__positionId
  position__initialOi
  position__initialDebt
  position__initialCollateral
  position__initialNotional
  position__leverage
  position__fractionUnwound
  position__isLong
  position__entryPrice
  position__isLiquidated
  position__currentOi
  position__currentDebt
  position__mint
  position__createdAtTimestamp
  position__createdAtBlockNumber
  position__numberOfUniwnds
  currentOi
  currentDebt
  isLong
  price
  collateral
  value
  timestamp
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasLimit
  transaction__gasPrice
}

scalar Bytes

type Factory {
  id: ID!
  marketCount: BigInt!
  txCount: BigInt!
  totalVolumeOVL: BigDecimal!
  totalFeesOVL: BigDecimal!
  totalValueLockedOVL: BigDecimal!
  feeRecipient: ID!
  owner: ID!
  markets(skip: Int = 0, first: Int = 100, orderBy: Market_orderBy, orderDirection: OrderDirection, where: Market_filter): [Market!]!
}

input Factory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  marketCount: BigInt
  marketCount_not: BigInt
  marketCount_gt: BigInt
  marketCount_lt: BigInt
  marketCount_gte: BigInt
  marketCount_lte: BigInt
  marketCount_in: [BigInt!]
  marketCount_not_in: [BigInt!]
  txCount: BigInt
  txCount_not: BigInt
  txCount_gt: BigInt
  txCount_lt: BigInt
  txCount_gte: BigInt
  txCount_lte: BigInt
  txCount_in: [BigInt!]
  txCount_not_in: [BigInt!]
  totalVolumeOVL: BigDecimal
  totalVolumeOVL_not: BigDecimal
  totalVolumeOVL_gt: BigDecimal
  totalVolumeOVL_lt: BigDecimal
  totalVolumeOVL_gte: BigDecimal
  totalVolumeOVL_lte: BigDecimal
  totalVolumeOVL_in: [BigDecimal!]
  totalVolumeOVL_not_in: [BigDecimal!]
  totalFeesOVL: BigDecimal
  totalFeesOVL_not: BigDecimal
  totalFeesOVL_gt: BigDecimal
  totalFeesOVL_lt: BigDecimal
  totalFeesOVL_gte: BigDecimal
  totalFeesOVL_lte: BigDecimal
  totalFeesOVL_in: [BigDecimal!]
  totalFeesOVL_not_in: [BigDecimal!]
  totalValueLockedOVL: BigDecimal
  totalValueLockedOVL_not: BigDecimal
  totalValueLockedOVL_gt: BigDecimal
  totalValueLockedOVL_lt: BigDecimal
  totalValueLockedOVL_gte: BigDecimal
  totalValueLockedOVL_lte: BigDecimal
  totalValueLockedOVL_in: [BigDecimal!]
  totalValueLockedOVL_not_in: [BigDecimal!]
  feeRecipient: ID
  feeRecipient_not: ID
  feeRecipient_gt: ID
  feeRecipient_lt: ID
  feeRecipient_gte: ID
  feeRecipient_lte: ID
  feeRecipient_in: [ID!]
  feeRecipient_not_in: [ID!]
  owner: ID
  owner_not: ID
  owner_gt: ID
  owner_lt: ID
  owner_gte: ID
  owner_lte: ID
  owner_in: [ID!]
  owner_not_in: [ID!]
  markets_: Market_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Factory_filter]
  or: [Factory_filter]
}

enum Factory_orderBy {
  id
  marketCount
  txCount
  totalVolumeOVL
  totalFeesOVL
  totalValueLockedOVL
  feeRecipient
  owner
  markets
}

type Liquidate {
  id: ID!
  owner: Account!
  sender: Account!
  position: Position!
  currentOi: BigInt!
  currentDebt: BigInt!
  isLong: Boolean!
  price: BigInt!
  mint: BigInt!
  collateral: BigInt!
  value: BigInt!
  timestamp: BigInt!
  transaction: Transaction!
}

input Liquidate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  sender_: Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  currentOi: BigInt
  currentOi_not: BigInt
  currentOi_gt: BigInt
  currentOi_lt: BigInt
  currentOi_gte: BigInt
  currentOi_lte: BigInt
  currentOi_in: [BigInt!]
  currentOi_not_in: [BigInt!]
  currentDebt: BigInt
  currentDebt_not: BigInt
  currentDebt_gt: BigInt
  currentDebt_lt: BigInt
  currentDebt_gte: BigInt
  currentDebt_lte: BigInt
  currentDebt_in: [BigInt!]
  currentDebt_not_in: [BigInt!]
  isLong: Boolean
  isLong_not: Boolean
  isLong_in: [Boolean!]
  isLong_not_in: [Boolean!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  mint: BigInt
  mint_not: BigInt
  mint_gt: BigInt
  mint_lt: BigInt
  mint_gte: BigInt
  mint_lte: BigInt
  mint_in: [BigInt!]
  mint_not_in: [BigInt!]
  collateral: BigInt
  collateral_not: BigInt
  collateral_gt: BigInt
  collateral_lt: BigInt
  collateral_gte: BigInt
  collateral_lte: BigInt
  collateral_in: [BigInt!]
  collateral_not_in: [BigInt!]
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Liquidate_filter]
  or: [Liquidate_filter]
}

enum Liquidate_orderBy {
  id
  owner
  owner__id
  sender
  sender__id
  position
  position__id
  position__positionId
  position__initialOi
  position__initialDebt
  position__initialCollateral
  position__initialNotional
  position__leverage
  position__fractionUnwound
  position__isLong
  position__entryPrice
  position__isLiquidated
  position__currentOi
  position__currentDebt
  position__mint
  position__createdAtTimestamp
  position__createdAtBlockNumber
  position__numberOfUniwnds
  currentOi
  currentDebt
  isLong
  price
  mint
  collateral
  value
  timestamp
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasLimit
  transaction__gasPrice
}

type Market {
  id: ID!
  feedAddress: String!
  factory: Factory!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  k: BigInt!
  lmbda: BigInt!
  delta: BigInt!
  capPayoff: BigInt!
  capNotional: BigInt!
  capLeverage: BigInt!
  circuitBreakerWindow: BigInt!
  circuitBreakerMintTarget: BigInt!
  maintenanceMarginFraction: BigInt!
  maintenanceMarginBurnRate: BigInt!
  liquidationFeeRate: BigInt!
  tradingFeeRate: BigInt!
  minCollateral: BigInt!
  priceDriftUpperLimit: BigInt!
  averageBlockTime: BigInt!
  oiLong: BigInt!
  oiShort: BigInt!
  positions(skip: Int = 0, first: Int = 100, orderBy: Position_orderBy, orderDirection: OrderDirection, where: Position_filter): [Position!]!
  isShutdown: Boolean!
}

input Market_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  feedAddress: String
  feedAddress_not: String
  feedAddress_gt: String
  feedAddress_lt: String
  feedAddress_gte: String
  feedAddress_lte: String
  feedAddress_in: [String!]
  feedAddress_not_in: [String!]
  feedAddress_contains: String
  feedAddress_contains_nocase: String
  feedAddress_not_contains: String
  feedAddress_not_contains_nocase: String
  feedAddress_starts_with: String
  feedAddress_starts_with_nocase: String
  feedAddress_not_starts_with: String
  feedAddress_not_starts_with_nocase: String
  feedAddress_ends_with: String
  feedAddress_ends_with_nocase: String
  feedAddress_not_ends_with: String
  feedAddress_not_ends_with_nocase: String
  factory: String
  factory_not: String
  factory_gt: String
  factory_lt: String
  factory_gte: String
  factory_lte: String
  factory_in: [String!]
  factory_not_in: [String!]
  factory_contains: String
  factory_contains_nocase: String
  factory_not_contains: String
  factory_not_contains_nocase: String
  factory_starts_with: String
  factory_starts_with_nocase: String
  factory_not_starts_with: String
  factory_not_starts_with_nocase: String
  factory_ends_with: String
  factory_ends_with_nocase: String
  factory_not_ends_with: String
  factory_not_ends_with_nocase: String
  factory_: Factory_filter
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  k: BigInt
  k_not: BigInt
  k_gt: BigInt
  k_lt: BigInt
  k_gte: BigInt
  k_lte: BigInt
  k_in: [BigInt!]
  k_not_in: [BigInt!]
  lmbda: BigInt
  lmbda_not: BigInt
  lmbda_gt: BigInt
  lmbda_lt: BigInt
  lmbda_gte: BigInt
  lmbda_lte: BigInt
  lmbda_in: [BigInt!]
  lmbda_not_in: [BigInt!]
  delta: BigInt
  delta_not: BigInt
  delta_gt: BigInt
  delta_lt: BigInt
  delta_gte: BigInt
  delta_lte: BigInt
  delta_in: [BigInt!]
  delta_not_in: [BigInt!]
  capPayoff: BigInt
  capPayoff_not: BigInt
  capPayoff_gt: BigInt
  capPayoff_lt: BigInt
  capPayoff_gte: BigInt
  capPayoff_lte: BigInt
  capPayoff_in: [BigInt!]
  capPayoff_not_in: [BigInt!]
  capNotional: BigInt
  capNotional_not: BigInt
  capNotional_gt: BigInt
  capNotional_lt: BigInt
  capNotional_gte: BigInt
  capNotional_lte: BigInt
  capNotional_in: [BigInt!]
  capNotional_not_in: [BigInt!]
  capLeverage: BigInt
  capLeverage_not: BigInt
  capLeverage_gt: BigInt
  capLeverage_lt: BigInt
  capLeverage_gte: BigInt
  capLeverage_lte: BigInt
  capLeverage_in: [BigInt!]
  capLeverage_not_in: [BigInt!]
  circuitBreakerWindow: BigInt
  circuitBreakerWindow_not: BigInt
  circuitBreakerWindow_gt: BigInt
  circuitBreakerWindow_lt: BigInt
  circuitBreakerWindow_gte: BigInt
  circuitBreakerWindow_lte: BigInt
  circuitBreakerWindow_in: [BigInt!]
  circuitBreakerWindow_not_in: [BigInt!]
  circuitBreakerMintTarget: BigInt
  circuitBreakerMintTarget_not: BigInt
  circuitBreakerMintTarget_gt: BigInt
  circuitBreakerMintTarget_lt: BigInt
  circuitBreakerMintTarget_gte: BigInt
  circuitBreakerMintTarget_lte: BigInt
  circuitBreakerMintTarget_in: [BigInt!]
  circuitBreakerMintTarget_not_in: [BigInt!]
  maintenanceMarginFraction: BigInt
  maintenanceMarginFraction_not: BigInt
  maintenanceMarginFraction_gt: BigInt
  maintenanceMarginFraction_lt: BigInt
  maintenanceMarginFraction_gte: BigInt
  maintenanceMarginFraction_lte: BigInt
  maintenanceMarginFraction_in: [BigInt!]
  maintenanceMarginFraction_not_in: [BigInt!]
  maintenanceMarginBurnRate: BigInt
  maintenanceMarginBurnRate_not: BigInt
  maintenanceMarginBurnRate_gt: BigInt
  maintenanceMarginBurnRate_lt: BigInt
  maintenanceMarginBurnRate_gte: BigInt
  maintenanceMarginBurnRate_lte: BigInt
  maintenanceMarginBurnRate_in: [BigInt!]
  maintenanceMarginBurnRate_not_in: [BigInt!]
  liquidationFeeRate: BigInt
  liquidationFeeRate_not: BigInt
  liquidationFeeRate_gt: BigInt
  liquidationFeeRate_lt: BigInt
  liquidationFeeRate_gte: BigInt
  liquidationFeeRate_lte: BigInt
  liquidationFeeRate_in: [BigInt!]
  liquidationFeeRate_not_in: [BigInt!]
  tradingFeeRate: BigInt
  tradingFeeRate_not: BigInt
  tradingFeeRate_gt: BigInt
  tradingFeeRate_lt: BigInt
  tradingFeeRate_gte: BigInt
  tradingFeeRate_lte: BigInt
  tradingFeeRate_in: [BigInt!]
  tradingFeeRate_not_in: [BigInt!]
  minCollateral: BigInt
  minCollateral_not: BigInt
  minCollateral_gt: BigInt
  minCollateral_lt: BigInt
  minCollateral_gte: BigInt
  minCollateral_lte: BigInt
  minCollateral_in: [BigInt!]
  minCollateral_not_in: [BigInt!]
  priceDriftUpperLimit: BigInt
  priceDriftUpperLimit_not: BigInt
  priceDriftUpperLimit_gt: BigInt
  priceDriftUpperLimit_lt: BigInt
  priceDriftUpperLimit_gte: BigInt
  priceDriftUpperLimit_lte: BigInt
  priceDriftUpperLimit_in: [BigInt!]
  priceDriftUpperLimit_not_in: [BigInt!]
  averageBlockTime: BigInt
  averageBlockTime_not: BigInt
  averageBlockTime_gt: BigInt
  averageBlockTime_lt: BigInt
  averageBlockTime_gte: BigInt
  averageBlockTime_lte: BigInt
  averageBlockTime_in: [BigInt!]
  averageBlockTime_not_in: [BigInt!]
  oiLong: BigInt
  oiLong_not: BigInt
  oiLong_gt: BigInt
  oiLong_lt: BigInt
  oiLong_gte: BigInt
  oiLong_lte: BigInt
  oiLong_in: [BigInt!]
  oiLong_not_in: [BigInt!]
  oiShort: BigInt
  oiShort_not: BigInt
  oiShort_gt: BigInt
  oiShort_lt: BigInt
  oiShort_gte: BigInt
  oiShort_lte: BigInt
  oiShort_in: [BigInt!]
  oiShort_not_in: [BigInt!]
  positions_: Position_filter
  isShutdown: Boolean
  isShutdown_not: Boolean
  isShutdown_in: [Boolean!]
  isShutdown_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Market_filter]
  or: [Market_filter]
}

enum Market_orderBy {
  id
  feedAddress
  factory
  factory__id
  factory__marketCount
  factory__txCount
  factory__totalVolumeOVL
  factory__totalFeesOVL
  factory__totalValueLockedOVL
  factory__feeRecipient
  factory__owner
  createdAtTimestamp
  createdAtBlockNumber
  k
  lmbda
  delta
  capPayoff
  capNotional
  capLeverage
  circuitBreakerWindow
  circuitBreakerMintTarget
  maintenanceMarginFraction
  maintenanceMarginBurnRate
  liquidationFeeRate
  tradingFeeRate
  minCollateral
  priceDriftUpperLimit
  averageBlockTime
  oiLong
  oiShort
  positions
  isShutdown
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Position {
  id: ID!
  positionId: String!
  owner: Account!
  market: Market!
  initialOi: BigInt!
  initialDebt: BigInt!
  initialCollateral: BigInt!
  initialNotional: BigInt!
  leverage: BigDecimal!
  fractionUnwound: BigInt!
  isLong: Boolean!
  entryPrice: BigInt!
  isLiquidated: Boolean!
  currentOi: BigInt!
  currentDebt: BigInt!
  mint: BigInt!
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  numberOfUniwnds: BigInt!
  builds(skip: Int = 0, first: Int = 100, orderBy: Build_orderBy, orderDirection: OrderDirection, where: Build_filter): [Build!]!
  liquidates(skip: Int = 0, first: Int = 100, orderBy: Liquidate_orderBy, orderDirection: OrderDirection, where: Liquidate_filter): [Liquidate!]!
  unwinds(skip: Int = 0, first: Int = 100, orderBy: Unwind_orderBy, orderDirection: OrderDirection, where: Unwind_filter): [Unwind!]!
}

input Position_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  positionId: String
  positionId_not: String
  positionId_gt: String
  positionId_lt: String
  positionId_gte: String
  positionId_lte: String
  positionId_in: [String!]
  positionId_not_in: [String!]
  positionId_contains: String
  positionId_contains_nocase: String
  positionId_not_contains: String
  positionId_not_contains_nocase: String
  positionId_starts_with: String
  positionId_starts_with_nocase: String
  positionId_not_starts_with: String
  positionId_not_starts_with_nocase: String
  positionId_ends_with: String
  positionId_ends_with_nocase: String
  positionId_not_ends_with: String
  positionId_not_ends_with_nocase: String
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  initialOi: BigInt
  initialOi_not: BigInt
  initialOi_gt: BigInt
  initialOi_lt: BigInt
  initialOi_gte: BigInt
  initialOi_lte: BigInt
  initialOi_in: [BigInt!]
  initialOi_not_in: [BigInt!]
  initialDebt: BigInt
  initialDebt_not: BigInt
  initialDebt_gt: BigInt
  initialDebt_lt: BigInt
  initialDebt_gte: BigInt
  initialDebt_lte: BigInt
  initialDebt_in: [BigInt!]
  initialDebt_not_in: [BigInt!]
  initialCollateral: BigInt
  initialCollateral_not: BigInt
  initialCollateral_gt: BigInt
  initialCollateral_lt: BigInt
  initialCollateral_gte: BigInt
  initialCollateral_lte: BigInt
  initialCollateral_in: [BigInt!]
  initialCollateral_not_in: [BigInt!]
  initialNotional: BigInt
  initialNotional_not: BigInt
  initialNotional_gt: BigInt
  initialNotional_lt: BigInt
  initialNotional_gte: BigInt
  initialNotional_lte: BigInt
  initialNotional_in: [BigInt!]
  initialNotional_not_in: [BigInt!]
  leverage: BigDecimal
  leverage_not: BigDecimal
  leverage_gt: BigDecimal
  leverage_lt: BigDecimal
  leverage_gte: BigDecimal
  leverage_lte: BigDecimal
  leverage_in: [BigDecimal!]
  leverage_not_in: [BigDecimal!]
  fractionUnwound: BigInt
  fractionUnwound_not: BigInt
  fractionUnwound_gt: BigInt
  fractionUnwound_lt: BigInt
  fractionUnwound_gte: BigInt
  fractionUnwound_lte: BigInt
  fractionUnwound_in: [BigInt!]
  fractionUnwound_not_in: [BigInt!]
  isLong: Boolean
  isLong_not: Boolean
  isLong_in: [Boolean!]
  isLong_not_in: [Boolean!]
  entryPrice: BigInt
  entryPrice_not: BigInt
  entryPrice_gt: BigInt
  entryPrice_lt: BigInt
  entryPrice_gte: BigInt
  entryPrice_lte: BigInt
  entryPrice_in: [BigInt!]
  entryPrice_not_in: [BigInt!]
  isLiquidated: Boolean
  isLiquidated_not: Boolean
  isLiquidated_in: [Boolean!]
  isLiquidated_not_in: [Boolean!]
  currentOi: BigInt
  currentOi_not: BigInt
  currentOi_gt: BigInt
  currentOi_lt: BigInt
  currentOi_gte: BigInt
  currentOi_lte: BigInt
  currentOi_in: [BigInt!]
  currentOi_not_in: [BigInt!]
  currentDebt: BigInt
  currentDebt_not: BigInt
  currentDebt_gt: BigInt
  currentDebt_lt: BigInt
  currentDebt_gte: BigInt
  currentDebt_lte: BigInt
  currentDebt_in: [BigInt!]
  currentDebt_not_in: [BigInt!]
  mint: BigInt
  mint_not: BigInt
  mint_gt: BigInt
  mint_lt: BigInt
  mint_gte: BigInt
  mint_lte: BigInt
  mint_in: [BigInt!]
  mint_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  numberOfUniwnds: BigInt
  numberOfUniwnds_not: BigInt
  numberOfUniwnds_gt: BigInt
  numberOfUniwnds_lt: BigInt
  numberOfUniwnds_gte: BigInt
  numberOfUniwnds_lte: BigInt
  numberOfUniwnds_in: [BigInt!]
  numberOfUniwnds_not_in: [BigInt!]
  builds_: Build_filter
  liquidates_: Liquidate_filter
  unwinds_: Unwind_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Position_filter]
  or: [Position_filter]
}

enum Position_orderBy {
  id
  positionId
  owner
  owner__id
  market
  market__id
  market__feedAddress
  market__createdAtTimestamp
  market__createdAtBlockNumber
  market__k
  market__lmbda
  market__delta
  market__capPayoff
  market__capNotional
  market__capLeverage
  market__circuitBreakerWindow
  market__circuitBreakerMintTarget
  market__maintenanceMarginFraction
  market__maintenanceMarginBurnRate
  market__liquidationFeeRate
  market__tradingFeeRate
  market__minCollateral
  market__priceDriftUpperLimit
  market__averageBlockTime
  market__oiLong
  market__oiShort
  market__isShutdown
  initialOi
  initialDebt
  initialCollateral
  initialNotional
  leverage
  fractionUnwound
  isLong
  entryPrice
  isLiquidated
  currentOi
  currentDebt
  mint
  createdAtTimestamp
  createdAtBlockNumber
  numberOfUniwnds
  builds
  liquidates
  unwinds
}

type Query {
  factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Factory
  factories(
    skip: Int = 0
    first: Int = 100
    orderBy: Factory_orderBy
    orderDirection: OrderDirection
    where: Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Factory!]!
  market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Market!]!
  position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Position!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  build(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Build
  builds(
    skip: Int = 0
    first: Int = 100
    orderBy: Build_orderBy
    orderDirection: OrderDirection
    where: Build_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Build!]!
  unwind(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unwind
  unwinds(
    skip: Int = 0
    first: Int = 100
    orderBy: Unwind_orderBy
    orderDirection: OrderDirection
    where: Unwind_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Unwind!]!
  liquidate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidate
  liquidates(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    where: Liquidate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidate!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  factory(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Factory
  factories(
    skip: Int = 0
    first: Int = 100
    orderBy: Factory_orderBy
    orderDirection: OrderDirection
    where: Factory_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Factory!]!
  market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Market!]!
  position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Position!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  build(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Build
  builds(
    skip: Int = 0
    first: Int = 100
    orderBy: Build_orderBy
    orderDirection: OrderDirection
    where: Build_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Build!]!
  unwind(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unwind
  unwinds(
    skip: Int = 0
    first: Int = 100
    orderBy: Unwind_orderBy
    orderDirection: OrderDirection
    where: Unwind_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Unwind!]!
  liquidate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidate
  liquidates(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    where: Liquidate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidate!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Transaction {
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  gasLimit: BigInt!
  gasPrice: BigInt!
  builds(skip: Int = 0, first: Int = 100, orderBy: Build_orderBy, orderDirection: OrderDirection, where: Build_filter): [Build!]!
  unwinds(skip: Int = 0, first: Int = 100, orderBy: Unwind_orderBy, orderDirection: OrderDirection, where: Unwind_filter): [Unwind!]!
  liquidates(skip: Int = 0, first: Int = 100, orderBy: Liquidate_orderBy, orderDirection: OrderDirection, where: Liquidate_filter): [Liquidate!]!
}

input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  builds_: Build_filter
  unwinds_: Unwind_filter
  liquidates_: Liquidate_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transaction_filter]
  or: [Transaction_filter]
}

enum Transaction_orderBy {
  id
  blockNumber
  timestamp
  gasLimit
  gasPrice
  builds
  unwinds
  liquidates
}

type Unwind {
  id: ID!
  owner: Account!
  position: Position!
  unwindNumber: BigInt!
  currentOi: BigInt!
  currentDebt: BigInt!
  isLong: Boolean!
  price: BigInt!
  fraction: BigInt!
  transferAmount: BigInt!
  pnl: BigInt!
  size: BigInt!
  mint: BigInt!
  collateral: BigInt!
  value: BigInt!
  timestamp: BigInt!
  transaction: Transaction!
}

input Unwind_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  unwindNumber: BigInt
  unwindNumber_not: BigInt
  unwindNumber_gt: BigInt
  unwindNumber_lt: BigInt
  unwindNumber_gte: BigInt
  unwindNumber_lte: BigInt
  unwindNumber_in: [BigInt!]
  unwindNumber_not_in: [BigInt!]
  currentOi: BigInt
  currentOi_not: BigInt
  currentOi_gt: BigInt
  currentOi_lt: BigInt
  currentOi_gte: BigInt
  currentOi_lte: BigInt
  currentOi_in: [BigInt!]
  currentOi_not_in: [BigInt!]
  currentDebt: BigInt
  currentDebt_not: BigInt
  currentDebt_gt: BigInt
  currentDebt_lt: BigInt
  currentDebt_gte: BigInt
  currentDebt_lte: BigInt
  currentDebt_in: [BigInt!]
  currentDebt_not_in: [BigInt!]
  isLong: Boolean
  isLong_not: Boolean
  isLong_in: [Boolean!]
  isLong_not_in: [Boolean!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  fraction: BigInt
  fraction_not: BigInt
  fraction_gt: BigInt
  fraction_lt: BigInt
  fraction_gte: BigInt
  fraction_lte: BigInt
  fraction_in: [BigInt!]
  fraction_not_in: [BigInt!]
  transferAmount: BigInt
  transferAmount_not: BigInt
  transferAmount_gt: BigInt
  transferAmount_lt: BigInt
  transferAmount_gte: BigInt
  transferAmount_lte: BigInt
  transferAmount_in: [BigInt!]
  transferAmount_not_in: [BigInt!]
  pnl: BigInt
  pnl_not: BigInt
  pnl_gt: BigInt
  pnl_lt: BigInt
  pnl_gte: BigInt
  pnl_lte: BigInt
  pnl_in: [BigInt!]
  pnl_not_in: [BigInt!]
  size: BigInt
  size_not: BigInt
  size_gt: BigInt
  size_lt: BigInt
  size_gte: BigInt
  size_lte: BigInt
  size_in: [BigInt!]
  size_not_in: [BigInt!]
  mint: BigInt
  mint_not: BigInt
  mint_gt: BigInt
  mint_lt: BigInt
  mint_gte: BigInt
  mint_lte: BigInt
  mint_in: [BigInt!]
  mint_not_in: [BigInt!]
  collateral: BigInt
  collateral_not: BigInt
  collateral_gt: BigInt
  collateral_lt: BigInt
  collateral_gte: BigInt
  collateral_lte: BigInt
  collateral_in: [BigInt!]
  collateral_not_in: [BigInt!]
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Unwind_filter]
  or: [Unwind_filter]
}

enum Unwind_orderBy {
  id
  owner
  owner__id
  position
  position__id
  position__positionId
  position__initialOi
  position__initialDebt
  position__initialCollateral
  position__initialNotional
  position__leverage
  position__fractionUnwound
  position__isLong
  position__entryPrice
  position__isLiquidated
  position__currentOi
  position__currentDebt
  position__mint
  position__createdAtTimestamp
  position__createdAtBlockNumber
  position__numberOfUniwnds
  unwindNumber
  currentOi
  currentDebt
  isLong
  price
  fraction
  transferAmount
  pnl
  size
  mint
  collateral
  value
  timestamp
  transaction
  transaction__id
  transaction__blockNumber
  transaction__timestamp
  transaction__gasLimit
  transaction__gasPrice
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}